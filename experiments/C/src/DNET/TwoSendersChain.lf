target C {
    timeout: 10 sec,
    // logging: debug,
    DNET: false,
    tracing: true
}

reactor Sender(send:bool = false) {
    timer t(0, 100 msec)
    output out:int
    reaction(t) -> out {=
        if (self->send) {
            lf_set(out, 42);
        }
    =}
}

reactor PassThrough {
  input in1: int
  input in2: int
  output out: int
  reaction(in1, in2) -> out {=
    // lf_set(out, 42);
  =}
}

reactor Receiver {  
    preamble {=
        FILE* fp;
    =}
    input in1: int
    input in2: int

    reaction(startup) {=
      fp = fopen("./TwoSendersChain.csv", "a");
      if(fp == NULL) {
        lf_print("Couldn't open the file.");
      }
    =}

    reaction(in1, in2) {=
        if (lf_time_logical_elapsed() % MSEC(500) == 0) {
          instant_t lag = lf_time_physical() - lf_time_logical();
          if(fp == NULL) {
            lf_print("Couldn't open the file.");
          } else {
            fprintf(fp, "%lld,", lag);
            fprintf(fp, "\n");
          }
        }
    =}
    
    reaction(shutdown) {=
        lf_print("Shutdown invoked.");
        fclose(fp);
    =}
}

federated reactor {
    s1 = new Sender()
    s2 = new Sender()
    s3 = new Sender(send = true)
    p = new PassThrough()
    r = new Receiver()

    s1.out, s2.out -> p.in1, p.in2
    p.out, s3.out -> r.in1, r.in2
}