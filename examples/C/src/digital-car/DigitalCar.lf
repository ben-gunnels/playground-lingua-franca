/**
 * Demo of a reactor simulating a digital car. 
 * The digital car reactor has a state variable describing the car lock. The lock state can be assigned three different integer values:
 * 0 if the state is locked, 1 if unlocked, and -1 if unknown.
 * 
 * @author Moez Ben Hajhmida
 */
target C {
  keepalive: true
}

import WebSocketClient from "../lib/WebSocketClient.lf"

preamble {=
  #include <stdlib.h>

  #define LOCKED   0
  #define UNLOCKED 1
  #define UNKNOWN  -1
=}



reactor DigiCar {
  output received: int  
  physical action unlock
  state lock: int 

  client = new WebSocketClient()

  reaction(startup)-> unlock, client.in_static {=
    // Initialize state as 'unknown'.
    self->lock = UNKNOWN;
    lf_print("door is '%d' at startup.", self->lock);
    lf_schedule(unlock, SEC(2));
  =}

    /**
  * Each 4 seconds switch thw state between locked and unlocked.
  */
  reaction(unlock) -> client.in_static {=
    char* buffer = (char*)malloc(10 * sizeof(char));

    if (self->lock == LOCKED){
      self->lock = UNLOCKED;
    }else{
      self->lock = LOCKED;
    }
    snprintf (buffer, sizeof(buffer), "%d",self->lock);
    
    lf_set(client.in_static, buffer);
    lf_print("sending %d.", self->lock);
    
  =}


  reaction(client.received) -> received {=
    lf_set(received, true);
  =}
}
