/**
 * Demo of a reactor that instanciates a WebsocketClient and use it to exchange messages with
 * a WebSocketServer.
 * @author Moez Ben Hajhmida
 */
target C {
  keepalive: true
}

import WebSocketClient from "../lib/WebSocketClient.lf"

preamble {=
  #define LOCKED   0
  #define UNLOCKED 1
  #define UNKNOWN  -1
 
=}



reactor PhyCar {
  state lock: int 
  physical action unlock

  client = new WebSocketClient()

  reaction(startup) -> unlock, client.in_static {=
    // Initialize state as 'locked'.
    self->lock = LOCKED;
    lf_print("door is '%d' at startup.", self->lock);
    
    lf_schedule(unlock, SEC(3));
  =}

  /**
  * Each 4 seconds switch thw state between locked and unlocked.
  */
  reaction(unlock) -> client.in_static {=
    char* buffer = (char*)malloc(10 * sizeof(char));

    if (self->lock == LOCKED){
      self->lock = UNLOCKED;
    }else{
      self->lock = LOCKED;
    }
    snprintf (buffer, sizeof(buffer), "%d",self->lock);
    

    lf_set(client.in_static, buffer);
    lf_print("sending %d.", self->lock);
    lf_schedule(unlock, SEC(6));
  =}
}
