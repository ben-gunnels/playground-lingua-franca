/** 
 * Sensor fusion mock up.
 * @author Ravi Akella
 * @author Marten Lohstroh
 */
target C {
  timeout: 10 sec
}

preamble {=
  #include "platform.h"
  #include <stdlib.h> // rand, srand
=}

@label("ASIL B")
reactor Sensor(period: time = 100 ms) {
  timer t(0, period)
  output y: int
  state count: int

  reaction(t) -> y {=
    lf_set(y, self->count);
    self->count++;
  =}
}

@label("ASIL D")
reactor Brakes(maxDelay: time = 50 ms) {
  input apply: int

  reaction(apply) {=
    interval_t diff_us = (lf_time_physical_elapsed() - lf_time_logical_elapsed()) / 1000;
    printf("(brakes lagging physical time by %lld us)\n", diff_us);
  =} deadline(maxDelay) {=
    printf("---- DEADLINE MISS ----\n");
    interval_t diff_us = (lf_time_physical_elapsed() - lf_time_logical_elapsed()) / 1000;
    printf("(brakes lagging physical time by %lld us)\n", diff_us);
    printf("---- DEADLINE MISS ----\n");
  =}
}

@label("ASIL D")
reactor Processor {
  input[2] x: int
  output z: int

  reaction(x) -> z {=
      // lf_sleep(MSEC(10));
    bool synced = false;
    if (x[0]->is_present && x[1]->is_present) {
       synced = true;
       printf("---- SYNC'ED ----\n");
    }
    if (x[0]->is_present) {
        printf(">>> camera frame: %d\n", x[0]->value);
    }
    if (x[1]->is_present) {
        printf(">>>> lidar frame: %d\n", x[1]->value);
    }
    if (synced) {
        printf("-----------------\n");
    }
    srand(x[0]->value);
    int r = rand();
    if (r % 2) {
        lf_set(z, r % 100);
    }
  =}
}

@label("QM")
reactor Display(maxDelay: time = 100 ms) {
  input show: int

  reaction(show) {=
    interval_t diff_us = (lf_time_physical_elapsed() - lf_time_logical_elapsed()) / 1000;
    printf("(display lagging physical time by %lld us)\n", diff_us);
  =} deadline(maxDelay) {=
    printf("---- DEADLINE MISS ----\n");
    interval_t diff_us = (lf_time_physical_elapsed() - lf_time_logical_elapsed()) / 1000;
    printf("(display lagging physical time by %lld us)\n", diff_us);
    printf("---- DEADLINE MISS ----\n");
  =}
}

main reactor {
  sensor1 = new Sensor(period = 40 ms)
  lidar = new Sensor(period = 200 ms)  // 5hz
  processor = new Processor()
  ivi = new Display()
  sensor1.y, lidar.y -> processor.x
  processor.z -> ivi.show
  brakes = new Brakes()
  processor.z -> brakes.apply
}
