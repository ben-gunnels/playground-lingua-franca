/**
 * @author Ravi Akella
 */
 target C{
    timeout: 10 sec,
    //docker: true,
    //coordination: centralized
 };

 preamble{=
    #include <time.h>
    #include "platform.h"
=}

 reactor Sensor_ASILB{
    timer t(0, 200 msec);
    output x:int;
    state count:int(0);
    reaction(t) -> x {=
           lf_set(x, self->count);
           self->count++;
    =}
 }

 reactor Processor_ASILD {
    input y:int;
    logical action a(100 msec):int;
    reaction(y) -> a {=
        lf_schedule_int(a, 0, y->value);
    =}

    output z:int;
    reaction(a) -> z {=

        if (2 * (a->value / 2) != a->value) {
            // The count variable is odd.
            // Take time to cause a deadline violation.
            lf_nanosleep(MSEC(100));
        }

        lf_set(z, a->value);
    =} 
    deadline(150 msec){=
        lf_print("STP violation occurred in a trigger ??");
    =}
}

reactor Display_QM{
    input z:int;
    reaction(z) {=
        printf("Logical time: %lld, Physical time %lld"
        		", Value: %d\n",
        		lf_time_logical_elapsed(),
        		lf_time_physical_elapsed(), z->value);
    =} deadline(100 msec) {=
        instant_t d = lf_time_physical_elapsed()
        		- lf_time_logical_elapsed();
        printf("***** Deadline missed at %lld nsecs\n", d);
        instant_t lt =  lf_time_logical();
    =}
}

 main reactor {
     sensor = new Sensor_ASILB();
     processor = new Processor_ASILD();
     ivi = new Display_QM();
     sensor.x -> processor.y;
     processor.z -> ivi.z;
 }
 